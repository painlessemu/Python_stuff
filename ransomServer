import socket
import ssl
import threading
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.fernet import Fernet

client_cert = 'client.crt'
server_key = 'server.key'
server_cert = 'server.crt'
port = 8080

context = ssl.create_default_context(ssl.Purpose.CLIENT_AUTH)
context.verify_mode = ssl.CERT_REQUIRED
context.load_verify_locations(cafile=client_cert)
context.load_cert_chain(certfile=server_cert, keyfile=server_key)
context.options |= ssl.OP_SINGLE_DH_USE
context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1 | ssl.OP_NO_TLSv1_2

def handle(self):
    encrypted_key = self.request.recv(4096).decode()
    #Step 1: Load the private key
    with open("/path/to/private_key.pem", "rb") as key_file:
        private_key = serialization.load_pem_private_key(
        key_file.read(),
        password=None,  # Use a password if the private key is encrypted
        backend=default_backend()
    )

    # Step 2: Load the encrypted symmetric key
    with open("/path/to/encryptedSymmetricKey.key", "rb") as key_file:
        encrypted_symmetric_key = key_file.read()

    # Step 3: Decrypt the symmetric key using the private key
    symmetric_key = private_key.decrypt(
        encrypted_symmetric_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

    # Step 4: Load the encrypted file data
    with open("/path/to/encrypted_file.txt", "rb") as file:
        encrypted_data = file.read()

    # Step 5: Decrypt the file data using the symmetric key
    fernet_instance = Fernet(symmetric_key)
    decrypted_data = fernet_instance.decrypt(encrypted_data)

    # Step 6: Write the decrypted data back to a file
    with open("/path/to/decrypted_file.txt", "wb") as file:
        file.write(decrypted_data)

    print("File decrypted successfully.")
    self.request.sendall(decrypted_data.encode)
    self.close()

with socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0) as sock:
    sock.bind(('', port))
    sock.listen(5)
    with context.wrap_socket(sock, server_side=True) as ssock:
        while True:
            self, addr = ssock.accept()
            print(addr)
            handlerThread = threading.Thread(target=handle , args=(self,))
            handlerThread.start()
        

